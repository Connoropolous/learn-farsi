{"version":3,"sources":["routes/Vocabulary.tsx","routes/FlashCards.tsx","components/Header.tsx","routes/Grammar.tsx","fetchParseCsv.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Vocabulary","FlashCard","revealPicture","revealPronunciation","revealFanglish","revealEnglish","revealFarsi","word","className","Picture","alt","English","src","Farsi","Fanglish","Pronunciation","controls","type","FlashCards","nouns","verbs","useState","nounsOrVerbs","setNounsOrVerbs","currentNounIndex","setCurrentNounIndex","setRevealEnglish","setRevealFanglish","paused","setPaused","timeLeft","setTimeLeft","useEffect","interval","setInterval","clearInterval","length","onClick","arrayLength","randomIndex","Math","floor","random","Header","to","map","index","name","key","I","children","S","Grammar","href","target","rel","fetchAndParseCsv","url","a","fetch","response","body","Error","reader","getReader","read","result","decoder","TextDecoder","csv","decode","value","results","Papa","parse","delimiter","header","data","Home","NOUN_DATA_URL","VERB_DATA_URL","App","setNouns","setVerbs","getData","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+TAEe,SAASA,IACtB,OAAO,8C,MCUT,SAASC,EAAT,GAOoB,IANlBC,EAMiB,EANjBA,cACAC,EAKiB,EALjBA,oBACAC,EAIiB,EAJjBA,eACAC,EAGiB,EAHjBA,cACAC,EAEiB,EAFjBA,YACAC,EACiB,EADjBA,KAEA,OACE,yBAAKC,UAAU,cACZN,GAAiBK,EAAKE,SACrB,oCACE,yBACEC,IAAKH,EAAKI,QACVC,IAAKL,EAAKE,QACVD,UAAU,kBAEZ,8BAGHF,GAAeC,EAAKM,OAAS,2BAAIN,EAAKM,OACtCT,GAAkBG,EAAKO,UAAY,2BAAIP,EAAKO,UAC5CT,GAAiBE,EAAKI,SAAW,2BAAIJ,EAAKI,SAC3C,6BACCR,GAAuBI,EAAKQ,eAC3B,2BAAOC,UAAQ,GACb,4BAAQJ,IAAKL,EAAKQ,cAAeE,KAAK,eADxC,iDASO,SAASC,EAAT,GAMX,IALFC,EAKC,EALDA,MACAC,EAIC,EAJDA,MAIC,EAMuCC,mBAAS,SANhD,mBAMMC,EANN,KAMoBC,EANpB,OAQ+CF,mBAAS,GARxD,mBAQMG,EARN,KAQwBC,EARxB,OASyCJ,oBAAS,GATlD,mBASMhB,EATN,KASqBqB,EATrB,OAU2CL,oBAAS,GAVpD,mBAUMjB,EAVN,KAUsBuB,EAVtB,OAW2BN,oBAAS,GAXpC,mBAWMO,EAXN,KAWcC,EAXd,OAe+BR,mBADF,IAd7B,mBAeMS,EAfN,KAegBC,EAfhB,KAqDD,GAtBAC,qBAAU,WACR,IAAMC,EAAWC,aAAY,WAEvBN,IAIa,IAAbE,GACFC,EAzBwB,IA0BxBN,EAAoBD,EAAmB,IAGvCO,EAAYD,EAAW,MAExB,KAEH,OAAO,WACLK,cAAcF,MAEf,CAACH,EAAUF,EAAQJ,IAGD,IAAjBL,EAAMiB,OACR,OAAO,2CAKT,IACM7B,GAD6B,UAAjBe,EAA2BH,EAAQC,GAC9BI,GACvB,OAAKjB,EAMH,6BACE,yBAAKC,UAAU,YACb,4BACE6B,QAAS,kBACPd,EAAiC,UAAjBD,EAA2B,QAAU,WAFzD,aAK8B,UAAjBA,EAA2B,QAAU,SAElD,4BAAQd,UAAU,cAAc6B,QA3Df,WACrB,IAAMC,EAA+B,UAAjBhB,EAA2BH,EAAMiB,OAAShB,EAAMgB,OAC9DG,EAAcC,KAAKC,MAAMD,KAAKE,SAAWJ,GAE/CP,EAP4B,IAQ5BN,EAAoBc,KAsDhB,oBAGA,4BACE/B,UAAU,eACV6B,QAAS,kBAAMV,GAAmBvB,KAEjCA,EAAiB,OAAS,SAJ7B,aAMA,4BACEI,UAAU,eACV6B,QAAS,kBAAMX,GAAkBrB,KAEhCA,EAAgB,OAAS,SAJ5B,YAMA,4BAAQgC,QAAS,kBAAMR,GAAWD,KAC/BA,EAAS,cAAgB,gBAI9B,kBAAC3B,EAAD,eACEM,KAAMA,GACF,CACFF,gBACAC,aAlGY,EAmGZJ,eAlGc,EAmGdC,qBAlGoB,EAmGpBC,oBAGJ,uBAAGI,UAAU,aAAasB,EAA1B,kBA5CK,oD,MC/GI,SAASa,IAQtB,OACE,yBAAKnC,UAAU,UACb,kBAAC,IAAD,CAASoC,GAAG,KACV,wBAAIpC,UAAU,SAAd,gBAEF,4BAZU,CACZ,CAAC,IAAK,QACN,CAAC,cAAe,cAChB,CAAC,eAAgB,eACjB,CAAC,WAAY,2BASFqC,KAAI,WAAaC,GAAb,uBAAEF,EAAF,KAAMG,EAAN,YACT,wBAAIC,IAAKF,GACP,kBAAC,IAAD,CAASF,GAAIA,EAAIpC,UAAU,SACxBuC,SCdf,SAASE,EAAT,GAAkC,IAArBC,EAAoB,EAApBA,SACX,OAAO,yBAAK1C,UAAU,UAAU0C,GAElC,SAASC,EAAT,GAAkC,IAArBD,EAAoB,EAApBA,SACX,OAAO,yBAAK1C,UAAU,cAAc0C,GAGvB,SAASE,IACtB,OACE,6BACE,kBAACD,EAAD,cAEE,kBAACF,EAAD,uBACA,kBAACA,EAAD,2BACA,kBAACA,EAAD,aAEF,kBAACE,EAAD,8BAEE,kBAACF,EAAD,qCAEE,kBAACA,EAAD,6HAIA,kBAACA,EAAD,qFAIA,kBAACA,EAAD,0GAGE,uBACEI,KAAK,wCACLC,OAAO,SACPC,IAAI,uBAHN,eASJ,kBAACN,EAAD,qBACA,kBAACA,EAAD,KACE,kBAACA,EAAD,oHAIA,kBAACA,EAAD,iFAIA,kBAACA,EAAD,uFAKF,kBAACA,EAAD,2CACA,kBAACA,EAAD,oBACA,kBAACA,EAAD,aAEF,kBAACE,EAAD,+KAIE,uBACEE,KAAK,2CACLC,OAAO,SACPC,IAAI,uBAHN,cAQF,kBAACJ,EAAD,uGAGE,uBACEE,KAAK,wDACLC,OAAO,SACPC,IAAI,uBAHN,e,qBC/EO,SAAeC,EAA9B,kC,4CAAe,WACbC,GADa,yBAAAC,EAAA,sEAGUC,MAAMF,GAHhB,WAGPG,EAHO,SAIKA,EAASC,KAJd,sBAKL,IAAIC,MAAM,yBAA2BL,GALhC,cAOPM,EAASH,EAASC,KAAKG,YAPhB,SAQQD,EAAOE,OARf,cAQPC,EARO,OASPC,EAAU,IAAIC,YAAY,SAC1BC,EAAMF,EAAQG,OAAOJ,EAAOK,OAC5BC,EAAUC,IAAKC,MAAML,EAAK,CAAEM,UAAW,KAAMC,QAAQ,IAX9C,kBAYNJ,EAAQK,MAZF,6C,sBCUf,SAASC,IACP,OAAO,yBAAKtE,UAAU,cAAf,iDAGT,IAAMuE,EACJ,8EAEIC,EACJ,8EAmCaC,MAjCf,WACE,IADa,EAEa5D,mBADG,IADhB,mBAENF,EAFM,KAEC+D,EAFD,OAIa7D,mBADG,IAHhB,mBAIND,EAJM,KAIC+D,EAJD,KAgBb,OARAnD,qBAAU,WAAM,4CACd,sBAAA0B,EAAA,kEACEwB,EADF,SACiB1B,EAAuBuB,GADxC,8CAEEI,EAFF,SAEiB3B,EAAuBwB,GAFxC,+EADc,uBAAC,WAAD,wBAKdI,KACC,IAGD,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,yBAAK5E,UAAU,WACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO6E,KAAK,cAAcC,UAAWtF,IACrC,kBAAC,IAAD,CAAOqF,KAAK,gBACV,kBAAC,EAAD,CAAYlE,MAAOA,EAAOC,MAAOA,KAEnC,kBAAC,IAAD,CAAOiE,KAAK,WAAWC,UAAWlC,IAClC,kBAAC,IAAD,CAAOiC,KAAK,IAAIC,UAAWR,QCpCjBS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3516993a.chunk.js","sourcesContent":["import React from 'react'\n\nexport default function Vocabulary() {\n  return <div>hi vocabulary</div>\n}\n","import React, { useState, useEffect } from 'react'\nimport './FlashCards.css'\nimport { Noun, Verb } from '../types'\n\ninterface FlashCardProps {\n  revealPicture: boolean\n  revealPronunciation: boolean\n  revealFanglish: boolean\n  revealEnglish: boolean\n  revealFarsi: boolean\n  word: Noun | Verb\n}\n\nfunction FlashCard({\n  revealPicture,\n  revealPronunciation,\n  revealFanglish,\n  revealEnglish,\n  revealFarsi,\n  word,\n}: FlashCardProps) {\n  return (\n    <div className='flash-card'>\n      {revealPicture && word.Picture && (\n        <>\n          <img\n            alt={word.English}\n            src={word.Picture}\n            className='noun -picture'\n          />\n          <br />\n        </>\n      )}\n      {revealFarsi && word.Farsi && <p>{word.Farsi}</p>}\n      {revealFanglish && word.Fanglish && <p>{word.Fanglish}</p>}\n      {revealEnglish && word.English && <p>{word.English}</p>}\n      <br />\n      {revealPronunciation && word.Pronunciation && (\n        <audio controls>\n          <source src={word.Pronunciation} type='audio/mpeg' />\n          Your browser does not support the audio tag.\n        </audio>\n      )}\n    </div>\n  )\n}\n\nexport default function FlashCards({\n  nouns,\n  verbs,\n}: {\n  nouns: Noun[]\n  verbs: Verb[]\n}) {\n  // non-toggleable defaults, for now\n  const revealFarsi = true\n  const revealPicture = true\n  const revealPronunciation = true\n\n  const [nounsOrVerbs, setNounsOrVerbs] = useState('nouns')\n\n  const [currentNounIndex, setCurrentNounIndex] = useState(0)\n  const [revealEnglish, setRevealEnglish] = useState(false)\n  const [revealFanglish, setRevealFanglish] = useState(false)\n  const [paused, setPaused] = useState(false)\n\n  // amount of time you have on each flash card, if the timer is enabled\n  const DEFAULT_TIME_PER_WORD = 20\n  const [timeLeft, setTimeLeft] = useState(DEFAULT_TIME_PER_WORD)\n\n  const pickRandomWord = () => {\n    const arrayLength = nounsOrVerbs === 'nouns' ? nouns.length : verbs.length\n    const randomIndex = Math.floor(Math.random() * arrayLength)\n    // setRevealEnglish(false)\n    setTimeLeft(DEFAULT_TIME_PER_WORD)\n    setCurrentNounIndex(randomIndex)\n  }\n\n  // const nextNoun  = () => {\n  //   setTimeLeft(DEFAULT_TIME_PER_WORD)\n  //   setCurrentNoun Index(currentNoun Index + 1)\n  // }\n\n  // setup the timer system\n  useEffect(() => {\n    const interval = setInterval(() => {\n      // dont mess with it if the timer is paused\n      if (paused) {\n        return\n      }\n      // reset if we hit 0 on the timer\n      if (timeLeft === 0) {\n        setTimeLeft(DEFAULT_TIME_PER_WORD)\n        setCurrentNounIndex(currentNounIndex + 1)\n      } else {\n        // decrease time left by 1 second otherwise\n        setTimeLeft(timeLeft - 1)\n      }\n    }, 1000)\n    // cleanup/ teardown just involves clearing the 1 second interval callback\n    return function teardown() {\n      clearInterval(interval)\n    }\n  }, [timeLeft, paused, currentNounIndex])\n\n  // loading state\n  if (nouns.length === 0) {\n    return <div>loading...</div>\n  }\n\n  // TODO: to improve, we prbly shouldn't hit this case where\n  // selected noun  doesn't exist in noun  list... just defensive coding\n  const wordArray = nounsOrVerbs === 'nouns' ? nouns : verbs\n  const word = wordArray[currentNounIndex]\n  if (!word) {\n    return <div>completed all words</div>\n  }\n\n  // main component\n  return (\n    <div>\n      <div className='controls'>\n        <button\n          onClick={() =>\n            setNounsOrVerbs(nounsOrVerbs === 'nouns' ? 'verbs' : 'nouns')\n          }\n        >\n          Switch to {nounsOrVerbs === 'nouns' ? 'verbs' : 'nouns'}\n        </button>\n        <button className='pick-random' onClick={pickRandomWord}>\n          Pick Random Word\n        </button>\n        <button\n          className='reveal-noun '\n          onClick={() => setRevealFanglish(!revealFanglish)}\n        >\n          {revealFanglish ? 'Hide' : 'Reveal'} Fanglish\n        </button>\n        <button\n          className='reveal-noun '\n          onClick={() => setRevealEnglish(!revealEnglish)}\n        >\n          {revealEnglish ? 'Hide' : 'Reveal'} English\n        </button>\n        <button onClick={() => setPaused(!paused)}>\n          {paused ? 'Start Timer' : 'Pause Timer'}\n        </button>\n        {/* <button onClick={nextNoun }>Next Noun </button> */}\n      </div>\n      <FlashCard\n        word={word}\n        {...{\n          revealEnglish,\n          revealFarsi,\n          revealPicture,\n          revealPronunciation,\n          revealFanglish,\n        }}\n      />\n      <p className='time-left'>{timeLeft} seconds left</p>\n    </div>\n  )\n}\n","import React from 'react'\nimport { NavLink } from 'react-router-dom'\nimport './Header.css'\n\nexport default function Header() {\n  const pages = [\n    ['/', 'Home'],\n    ['/vocabulary', 'Vocabulary'],\n    ['/flash-cards', 'Flash Cards'],\n    ['/grammar', 'Grammatical Structures'],\n  ]\n\n  return (\n    <div className='header'>\n      <NavLink to='/'>\n        <h2 className='green'>Learn Farsi</h2>\n      </NavLink>\n      <ul>\n        {pages.map(([to, name], index) => (\n          <li key={index}>\n            <NavLink to={to} className='green'>\n              {name}\n            </NavLink>\n          </li>\n        ))}\n      </ul>\n    </div>\n  )\n}\n","import React, { ReactNode } from 'react'\n\ninterface IProps {\n  children: ReactNode\n  // any other props that come into the component\n}\n\nfunction I({ children }: IProps) {\n  return <div className='indent'>{children}</div>\n}\nfunction S({ children }: IProps) {\n  return <div className='spaced-div'>{children}</div>\n}\n\nexport default function Grammar() {\n  return (\n    <div>\n      <S>\n        Tenses\n        <I>Simple Present</I>\n        <I>Present Continuous</I>\n        <I>...</I>\n      </S>\n      <S>\n        Structures of Language\n        <I>\n          Noun: Person/Place/Thing/Idea\n          <I>\n            Proper Noun: any direct reference to a named thing, which in English\n            is written with capital letter (e.g. Manhattan)\n          </I>\n          <I>\n            Common Noun: any general reference to a person/place/thing/idea.\n            (e.g. city)\n          </I>\n          <I>\n            Pronoun: a pronoun has been theorized to be a word that substitutes\n            for a noun or noun phrase.&nbsp;\n            <a\n              href='https://en.wikipedia.org/wiki/Pronoun'\n              target='_blank'\n              rel='noopener noreferrer'\n            >\n              wikipedia\n            </a>\n          </I>\n        </I>\n        <I>Verb: Action</I>\n        <I>\n          <I>\n            Compound Verb: a verb which consists of a noun and a helper verb\n            (e.g. &lt;to become&gt; &lt;awake&gt; = &lt;verb&gt; &lt;noun&gt;)\n          </I>\n          <I>\n            Transitive Verb: A verb which relates with an object (e.g. to cook\n            food)\n          </I>\n          <I>\n            Intransitive Verb: A verb which doesn't relate with an object (e.g.\n            to sleep)\n          </I>\n        </I>\n        <I>Adjective: Description (e.g. blue)</I>\n        <I>Adverb: ...</I>\n        <I>...</I>\n      </S>\n      <S>\n        Infinitive: a verb, generally not having an expressed subject, and in\n        many languages the infinitive is a single word, often with a\n        characteristic inflective ending&nbsp;\n        <a\n          href='https://en.wikipedia.org/wiki/Infinitive'\n          target='_blank'\n          rel='noopener noreferrer'\n        >\n          wikipedia\n        </a>\n      </S>\n      <S>\n        Conjugation: the creation of derived forms of a verb from its principal\n        parts by inflection&nbsp;\n        <a\n          href='https://en.wikipedia.org/wiki/Grammatical_conjugation'\n          target='_blank'\n          rel='noopener noreferrer'\n        >\n          wikipedia\n        </a>\n      </S>\n    </div>\n  )\n}\n","import Papa from 'papaparse'\n\nexport default async function fetchAndParseCsv<DataType>(\n  url: string\n): Promise<DataType[]> {\n  const response = await fetch(url)\n  if (!response || !response.body) {\n    throw new Error('no response from url: ' + url)\n  }\n  const reader = response.body.getReader()\n  const result = await reader.read() // raw array\n  const decoder = new TextDecoder('utf-8')\n  const csv = decoder.decode(result.value) // the csv text\n  const results = Papa.parse(csv, { delimiter: ', ', header: true }) // object with { data, errors, meta }\n  return results.data // array of objects\n}\n","import React, { useState, useEffect } from 'react'\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom'\nimport './App.css'\n\nimport Vocabulary from './routes/Vocabulary'\nimport FlashCards from './routes/FlashCards'\n\nimport Header from './components/Header'\nimport Grammar from './routes/Grammar'\nimport fetchAndParseCsv from './fetchParseCsv'\nimport { Noun, Verb } from './types'\n\nfunction Home() {\n  return <div className='home green'>Learn Farsi :) فارسی</div>\n}\n\nconst NOUN_DATA_URL =\n  'https://raw.githubusercontent.com/Connoropolous/farsi-data/master/nouns.csv'\n\nconst VERB_DATA_URL =\n  'https://raw.githubusercontent.com/Connoropolous/farsi-data/master/verbs.csv'\n\nfunction App() {\n  const defaultNouns: Noun[] = []\n  const [nouns, setNouns] = useState(defaultNouns)\n  const defaultVerbs: Verb[] = []\n  const [verbs, setVerbs] = useState(defaultVerbs)\n\n  // on the first component mount,\n  // fetch the word data\n  useEffect(() => {\n    async function getData() {\n      setNouns(await fetchAndParseCsv<Noun>(NOUN_DATA_URL))\n      setVerbs(await fetchAndParseCsv<Verb>(VERB_DATA_URL))\n    }\n    getData()\n  }, [])\n\n  return (\n    <Router>\n      <Header />\n      <div className='content'>\n        <Switch>\n          <Route path='/vocabulary' component={Vocabulary} />\n          <Route path='/flash-cards'>\n            <FlashCards nouns={nouns} verbs={verbs} />\n          </Route>\n          <Route path='/grammar' component={Grammar} />\n          <Route path='/' component={Home} />\n        </Switch>\n      </div>\n    </Router>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}