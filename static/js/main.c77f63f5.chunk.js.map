{"version":3,"sources":["routes/Vocabulary.tsx","types.ts","rules.ts","routes/FlashCards.tsx","components/Header.tsx","routes/Grammar.tsx","fetchParseCsv.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Vocabulary","href","target","rel","WordType","randomFromEnum","anEnum","enumValues","Object","keys","map","n","Number","parseInt","filter","isNaN","Math","floor","random","length","Inflections","simplePresentPronouns","FIRST_PERSON_SINGULAR","FIRST_PERSON_PLURAL","SECOND_PERSON_SINGULAR","SECOND_PERSON_PLURAL","THIRD_PERSON_SINGULAR","THIRD_PERSON_PLURAL","simplePresentConjugations","FlashCard","fanglish","revealPicture","revealPronunciation","revealFanglish","revealEnglish","revealFarsi","word","useState","inflection","setInflection","useEffect","type","VERB","simplePresentRoot","conjugateSimplePresent","SimplePresentRoot","Fanglish","className","Picture","alt","English","src","Farsi","NOUN","replace","Pronunciation","controls","FlashCards","nouns","verbs","nounsOrVerbs","setNounsOrVerbs","currentWordIndex","setCurrentWordIndex","setRevealEnglish","setRevealFanglish","paused","setPaused","timeLeft","setTimeLeft","pickRandomWord","withinArrayMaxIndex","randomIndex","interval","setInterval","clearInterval","onClick","Header","to","index","name","key","I","children","S","Grammar","fetchAndParseCsv","url","a","fetch","response","body","Error","reader","getReader","read","result","decoder","TextDecoder","csv","decode","value","results","Papa","parse","delimiter","header","data","Home","NOUN_DATA_URL","VERB_DATA_URL","App","setNouns","setVerbs","forEach","noun","verb","getData","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c77f63f5.chunk.js","sourcesContent":["import React from 'react'\n\nexport default function Vocabulary() {\n  return (\n    <div>\n      <a\n        href='https://github.com/Connoropolous/farsi-data/blob/master/verbs.csv'\n        target='_blank'\n        rel='noopener noreferrer'\n      >\n        verbs\n      </a>\n      <br />\n      <a\n        href='https://github.com/Connoropolous/farsi-data/blob/master/nouns.csv'\n        target='_blank'\n        rel='noopener noreferrer'\n      >\n        nouns\n      </a>\n    </div>\n  )\n}\n","export function randomFromEnum<T>(anEnum: T): T[keyof T] {\n  const enumValues = (Object.keys(anEnum)\n    .map((n) => Number.parseInt(n))\n    .filter((n) => !Number.isNaN(n)) as unknown) as T[keyof T][]\n  const randomIndex = Math.floor(Math.random() * enumValues.length)\n  const randomEnumValue = enumValues[randomIndex]\n  return randomEnumValue\n}\n\nexport enum WordType {\n  NOUN,\n  VERB,\n}\n\nexport interface Verb {\n  type: WordType.VERB\n  Picture: string\n  English: string\n  Fanglish: string\n  SimplePresentRoot: string\n  Farsi: string\n  Pronunciation: string\n}\n\nexport interface Noun {\n  type: WordType.NOUN\n  Picture: string\n  English: string\n  Fanglish: string\n  Farsi: string\n  Pronunciation: string\n}\n","export enum Inflections {\n  FIRST_PERSON_SINGULAR,\n  FIRST_PERSON_PLURAL,\n  SECOND_PERSON_SINGULAR,\n  SECOND_PERSON_PLURAL,\n  THIRD_PERSON_SINGULAR,\n  THIRD_PERSON_PLURAL,\n}\n\nexport const simplePresentPronouns: {\n  [key: string]: string\n} = {\n  [Inflections.FIRST_PERSON_SINGULAR]: 'man',\n  [Inflections.FIRST_PERSON_PLURAL]: 'ma',\n  [Inflections.SECOND_PERSON_SINGULAR]: 'to',\n  [Inflections.SECOND_PERSON_PLURAL]: 'shoma',\n  [Inflections.THIRD_PERSON_SINGULAR]: 'u',\n  [Inflections.THIRD_PERSON_PLURAL]: 'unha',\n}\n\nconst simplePresentConjugations: {\n  [key: string]: string\n} = {\n  [Inflections.FIRST_PERSON_SINGULAR]: 'am',\n  [Inflections.FIRST_PERSON_PLURAL]: 'im',\n  [Inflections.SECOND_PERSON_SINGULAR]: 'i',\n  [Inflections.SECOND_PERSON_PLURAL]: 'id',\n  [Inflections.THIRD_PERSON_SINGULAR]: 'ad',\n  [Inflections.THIRD_PERSON_PLURAL]: 'and',\n}\n\nexport function conjugateSimplePresent(\n  simplePresentRoot: string,\n  inflection: Inflections\n): string {\n  // just concatenate the simple present root with the correct conjugated ending for the specified inflection\n  return `${simplePresentRoot}${simplePresentConjugations[inflection]}`\n}\n","import React, { useState, useEffect } from 'react'\nimport './FlashCards.css'\nimport { Noun, Verb, WordType, randomFromEnum } from '../types'\nimport {\n  conjugateSimplePresent,\n  Inflections,\n  simplePresentPronouns,\n} from '../rules'\n\ninterface FlashCardProps {\n  revealPicture: boolean\n  revealPronunciation: boolean\n  revealFanglish: boolean\n  revealEnglish: boolean\n  revealFarsi: boolean\n  word: Noun | Verb\n}\n\nfunction FlashCard({\n  revealPicture,\n  revealPronunciation,\n  revealFanglish,\n  revealEnglish,\n  revealFarsi,\n  word,\n}: FlashCardProps) {\n  let [inflection, setInflection] = useState(randomFromEnum(Inflections))\n\n  // if the word changes, randomly pick a different inflection\n  useEffect(() => {\n    setInflection(randomFromEnum(Inflections))\n  }, [word])\n\n  let fanglish: string\n  if (word.type === WordType.VERB) {\n    fanglish = conjugateSimplePresent(word.SimplePresentRoot, inflection)\n  } else {\n    fanglish = word.Fanglish\n  }\n\n  return (\n    <div className='flash-card'>\n      {revealPicture && word.Picture && (\n        <>\n          <img\n            alt={word.English}\n            src={word.Picture}\n            className='noun -picture'\n          />\n          <br />\n        </>\n      )}\n      {revealFarsi && word.Farsi && <p>{word.Farsi}</p>}\n      {word.type === WordType.NOUN && revealFanglish && fanglish && (\n        <p>{fanglish}</p>\n      )}\n      {word.type === WordType.VERB && fanglish && (\n        <p>\n          {simplePresentPronouns[inflection]}{' '}\n          {/* if hiding, show underscores in the place of letters, and extra space between words */}\n          {revealFanglish ? fanglish : fanglish.replace(/\\w/g, '_')}\n        </p>\n      )}\n      {revealEnglish && word.English && <p>{word.English}</p>}\n      <br />\n      {revealPronunciation && word.Pronunciation && (\n        <audio controls>\n          <source src={word.Pronunciation} type='audio/mpeg' />\n          Your browser does not support the audio tag.\n        </audio>\n      )}\n    </div>\n  )\n}\n\nexport default function FlashCards({\n  nouns,\n  verbs,\n}: {\n  nouns: Noun[]\n  verbs: Verb[]\n}) {\n  // non-toggleable defaults, for now\n  const revealFarsi = true\n  const revealPicture = true\n  const revealPronunciation = true\n\n  const [nounsOrVerbs, setNounsOrVerbs] = useState('nouns')\n\n  const [currentWordIndex, setCurrentWordIndex] = useState(0)\n  const [revealEnglish, setRevealEnglish] = useState(false)\n  const [revealFanglish, setRevealFanglish] = useState(false)\n  const [paused, setPaused] = useState(false)\n\n  // amount of time you have on each flash card, if the timer is enabled\n  const DEFAULT_TIME_PER_WORD = 20\n  const [timeLeft, setTimeLeft] = useState(DEFAULT_TIME_PER_WORD)\n\n  const pickRandomWord = (length: number) => {\n    const withinArrayMaxIndex = length - 1\n    const randomIndex = Math.floor(Math.random() * withinArrayMaxIndex)\n    // setRevealEnglish(false)\n    setTimeLeft(DEFAULT_TIME_PER_WORD)\n    setCurrentWordIndex(randomIndex)\n  }\n\n  // const nextNoun  = () => {\n  //   setTimeLeft(DEFAULT_TIME_PER_WORD)\n  //   setCurrentNoun Index(currentNoun Index + 1)\n  // }\n\n  // setup the timer system\n  useEffect(() => {\n    const interval = setInterval(() => {\n      // dont mess with it if the timer is paused\n      if (paused) {\n        return\n      }\n      // reset if we hit 0 on the timer\n      if (timeLeft === 0) {\n        setTimeLeft(DEFAULT_TIME_PER_WORD)\n        setCurrentWordIndex(currentWordIndex + 1)\n      } else {\n        // decrease time left by 1 second otherwise\n        setTimeLeft(timeLeft - 1)\n      }\n    }, 1000)\n    // cleanup/ teardown just involves clearing the 1 second interval callback\n    return function teardown() {\n      clearInterval(interval)\n    }\n  }, [timeLeft, paused, currentWordIndex])\n\n  // loading state\n  if (nouns.length === 0) {\n    return <div>loading...</div>\n  }\n\n  // TODO: to improve, we prbly shouldn't hit this case where\n  // selected noun  doesn't exist in noun  list... just defensive coding\n  const wordArray = nounsOrVerbs === 'nouns' ? nouns : verbs\n  const word = wordArray[currentWordIndex]\n\n  // main component\n  return (\n    <div>\n      <div className='controls'>\n        <button\n          onClick={() => {\n            setNounsOrVerbs(nounsOrVerbs === 'nouns' ? 'verbs' : 'nouns')\n            pickRandomWord(\n              nounsOrVerbs === 'nouns' ? verbs.length : nouns.length\n            )\n          }}\n        >\n          Switch to {nounsOrVerbs === 'nouns' ? 'verbs' : 'nouns'}\n        </button>\n        <button\n          className='pick-random'\n          onClick={() =>\n            pickRandomWord(\n              nounsOrVerbs === 'nouns' ? nouns.length : verbs.length\n            )\n          }\n        >\n          Pick Random Word\n        </button>\n        <button\n          className='reveal-noun '\n          onClick={() => setRevealFanglish(!revealFanglish)}\n        >\n          {revealFanglish ? 'Hide' : 'Reveal'} Fanglish\n        </button>\n        <button\n          className='reveal-noun'\n          onClick={() => setRevealEnglish(!revealEnglish)}\n        >\n          {revealEnglish ? 'Hide' : 'Reveal'} English\n        </button>\n        <button onClick={() => setPaused(!paused)}>\n          {paused ? 'Start Timer' : 'Pause Timer'}\n        </button>\n        {/* <button onClick={nextNoun }>Next Noun </button> */}\n      </div>\n      {word && (\n        <FlashCard\n          word={word}\n          {...{\n            revealEnglish,\n            revealFarsi,\n            revealPicture,\n            revealPronunciation,\n            revealFanglish,\n          }}\n        />\n      )}\n      {!word && <p>word not found</p>}\n      <p className='time-left'>{timeLeft} seconds left</p>\n    </div>\n  )\n}\n","import React from 'react'\nimport { NavLink } from 'react-router-dom'\nimport './Header.css'\n\nexport default function Header() {\n  const pages = [\n    ['/', 'Home'],\n    ['/vocabulary', 'Vocabulary'],\n    ['/flash-cards', 'Flash Cards'],\n    ['/grammar', 'Grammatical Structures'],\n  ]\n\n  return (\n    <div className='header'>\n      <NavLink to='/'>\n        <h2 className='green'>Learn Farsi</h2>\n      </NavLink>\n      <ul>\n        {pages.map(([to, name], index) => (\n          <li key={index}>\n            <NavLink to={to} className='green'>\n              {name}\n            </NavLink>\n          </li>\n        ))}\n      </ul>\n    </div>\n  )\n}\n","import React, { ReactNode } from 'react'\n\ninterface IProps {\n  children: ReactNode\n  // any other props that come into the component\n}\n\nfunction I({ children }: IProps) {\n  return <div className='indent'>{children}</div>\n}\nfunction S({ children }: IProps) {\n  return <div className='spaced-div'>{children}</div>\n}\n\nexport default function Grammar() {\n  return (\n    <div>\n      <S>\n        Tenses\n        <I>Simple Present</I>\n        <I>Present Continuous</I>\n        <I>...</I>\n      </S>\n      <S>\n        Structures of Language\n        <I>\n          Noun: Person/Place/Thing/Idea\n          <I>\n            Proper Noun: any direct reference to a named thing, which in English\n            is written with capital letter (e.g. Manhattan)\n          </I>\n          <I>\n            Common Noun: any general reference to a person/place/thing/idea.\n            (e.g. city)\n          </I>\n          <I>\n            Pronoun: a pronoun has been theorized to be a word that substitutes\n            for a noun or noun phrase.&nbsp;\n            <a\n              href='https://en.wikipedia.org/wiki/Pronoun'\n              target='_blank'\n              rel='noopener noreferrer'\n            >\n              wikipedia\n            </a>\n          </I>\n        </I>\n        <I>Verb: Action</I>\n        <I>\n          <I>\n            Compound Verb: a verb which consists of a noun and a helper verb\n            (e.g. &lt;to become&gt; &lt;awake&gt; = &lt;verb&gt; &lt;noun&gt;)\n          </I>\n          <I>\n            Transitive Verb: A verb which relates with an object (e.g. to cook\n            food) --- I am thinking of this as things that only happen through\n            conscious or unconscious acts of will or intention\n          </I>\n          <I>\n            Intransitive Verb: A verb which doesn't relate with an object (e.g.\n            to sleep) --- I am thinking of this as 'transition between states',\n            not necessarily having required any act of will or intention. An\n            exception is in something like \"she is running\". Running describes\n            the state, which in that case is requiring intention, but is still\n            intransitive, given there's no object, only subject.\n          </I>\n        </I>\n        <I>Adjective: Description (e.g. blue)</I>\n        <I>Adverb: ...</I>\n        <I>Propositions: ...</I>\n        <I>Articles: ...</I>\n        <I>...</I>\n      </S>\n      <S>\n        Infinitive: a verb, generally not having an expressed subject, and in\n        many languages the infinitive is a single word, often with a\n        characteristic inflective ending&nbsp;\n        <a\n          href='https://en.wikipedia.org/wiki/Infinitive'\n          target='_blank'\n          rel='noopener noreferrer'\n        >\n          wikipedia\n        </a>\n      </S>\n      <S>\n        Conjugation: the creation of derived forms of a verb from its principal\n        parts by inflection&nbsp;\n        <a\n          href='https://en.wikipedia.org/wiki/Grammatical_conjugation'\n          target='_blank'\n          rel='noopener noreferrer'\n        >\n          wikipedia\n        </a>\n      </S>\n    </div>\n  )\n}\n","import Papa from 'papaparse'\n\nexport default async function fetchAndParseCsv<DataType>(\n  url: string\n): Promise<DataType[]> {\n  const response = await fetch(url)\n  if (!response || !response.body) {\n    throw new Error('no response from url: ' + url)\n  }\n  const reader = response.body.getReader()\n  const result = await reader.read() // raw array\n  const decoder = new TextDecoder('utf-8')\n  const csv = decoder.decode(result.value) // the csv text\n  const results = Papa.parse(csv, { delimiter: ', ', header: true }) // object with { data, errors, meta }\n  return results.data // array of objects\n}\n","import React, { useState, useEffect } from 'react'\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom'\nimport './App.css'\n\nimport Vocabulary from './routes/Vocabulary'\nimport FlashCards from './routes/FlashCards'\n\nimport Header from './components/Header'\nimport Grammar from './routes/Grammar'\nimport fetchAndParseCsv from './fetchParseCsv'\nimport { Noun, Verb, WordType } from './types'\n\nfunction Home() {\n  return <div className='home green'>Learn Farsi :) فارسی</div>\n}\n\nconst NOUN_DATA_URL =\n  'https://raw.githubusercontent.com/Connoropolous/farsi-data/master/nouns.csv'\n\nconst VERB_DATA_URL =\n  'https://raw.githubusercontent.com/Connoropolous/farsi-data/master/verbs.csv'\n\nfunction App() {\n  const defaultNouns: Noun[] = []\n  const [nouns, setNouns] = useState(defaultNouns)\n  const defaultVerbs: Verb[] = []\n  const [verbs, setVerbs] = useState(defaultVerbs)\n\n  // on the first component mount,\n  // fetch the word data\n  useEffect(() => {\n    async function getData() {\n      const nouns = await fetchAndParseCsv<Noun>(NOUN_DATA_URL)\n      nouns.forEach((noun) => {\n        noun.type = WordType.NOUN\n      })\n      const verbs = await fetchAndParseCsv<Verb>(VERB_DATA_URL)\n      verbs.forEach((verb) => {\n        verb.type = WordType.VERB\n      })\n      setNouns(nouns)\n      setVerbs(verbs)\n    }\n    getData()\n  }, [])\n\n  return (\n    <Router>\n      <Header />\n      <div className='content'>\n        <Switch>\n          <Route path='/vocabulary' component={Vocabulary} />\n          <Route path='/flash-cards'>\n            <FlashCards nouns={nouns} verbs={verbs} />\n          </Route>\n          <Route path='/grammar' component={Grammar} />\n          <Route path='/' component={Home} />\n        </Switch>\n      </div>\n    </Router>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}